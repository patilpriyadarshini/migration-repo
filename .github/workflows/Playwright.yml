name: Playwright Tests
on:
  push:
    branches: [ main ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
        cache-dependency-path: ./Phase2_frontend
    - name: Install dependencies    
      working-directory: ./Phase2_frontend
      run: npm ci
    - name: Install Playwright Browsers
      working-directory: ./Phase2_frontend
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      working-directory: ./Phase2_frontend
      run: npx playwright test --reporter=html
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: ./Phase2_frontend/playwright-report/
        retention-days: 30
    - name: Deploy report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: ${{ !cancelled() }}
      with: 
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./Phase2_frontend/playwright-report
        destination_dir: reports/${{ github.run_number }}
        keep_files: true
        enable_jekyll: false
        force_orphan: true
    - name: Send comprehensive report data to n8n
      if: ${{ !cancelled() }}
      run: |
        cd ./Phase2_frontend
        
        # Check if HTML report exists
        if [ ! -f "playwright-report/index.html" ]; then
          echo "HTML report not found, skipping n8n notification"
          exit 0
        fi
        
        # Extract test results from base64-encoded ZIP data in the HTML report
        echo "Extracting test results from Playwright HTML report..."
        
        # Extract base64 data from JavaScript variable
        BASE64_DATA=$(grep -o 'window\.playwrightReportBase64 = "[^"]*"' playwright-report/index.html | sed 's/.*= "data:application\/zip;base64,//' | sed 's/".*//')
        
        if [ -z "$BASE64_DATA" ]; then
          echo "Warning: Could not extract base64 data from HTML report"
          TEST_SUMMARY="Test data extraction failed - base64 data not found"
          PASSED_COUNT=0
          FAILED_COUNT=0
          TOTAL_COUNT=0
        else
          # Decode base64 and extract ZIP contents to temporary directory
          TEMP_DIR=$(mktemp -d)
          echo "$BASE64_DATA" | base64 -d > "$TEMP_DIR/report.zip"
          cd "$TEMP_DIR"
          unzip -q report.zip 2>/dev/null || {
            echo "Warning: Could not extract ZIP contents"
            TEST_SUMMARY="Test data extraction failed - ZIP extraction error"
            PASSED_COUNT=0
            FAILED_COUNT=0
            TOTAL_COUNT=0
            cd - > /dev/null
          }
          
          if [ -f "report.json" ]; then
            # Parse JSON to extract test summary (Playwright uses different field names)
            TOTAL_COUNT=$(jq -r '.stats.total // 0' report.json 2>/dev/null || echo "0")
            PASSED_COUNT=$(jq -r '.stats.expected // 0' report.json 2>/dev/null || echo "0")
            FAILED_COUNT=$(jq -r '.stats.unexpected // 0' report.json 2>/dev/null || echo "0")
            SKIPPED_COUNT=$(jq -r '.stats.skipped // 0' report.json 2>/dev/null || echo "0")
            FLAKY_COUNT=$(jq -r '.stats.flaky // 0' report.json 2>/dev/null || echo "0")
            
            # Create meaningful test summary
            TEST_SUMMARY="Tests: $TOTAL_COUNT total, $PASSED_COUNT passed, $FAILED_COUNT failed"
            if [ "$SKIPPED_COUNT" -gt 0 ]; then
              TEST_SUMMARY="$TEST_SUMMARY, $SKIPPED_COUNT skipped"
            fi
            if [ "$FLAKY_COUNT" -gt 0 ]; then
              TEST_SUMMARY="$TEST_SUMMARY, $FLAKY_COUNT flaky"
            fi
            
            # Extract individual test results with pass/fail status
            TEST_RESULTS_JSON=$(jq -c '[.files[]?.tests[]? | {name: .title, status: (if .ok then "passed" else "failed" end), duration: .duration, outcome: .outcome}] // []' report.json 2>/dev/null || echo "[]")
            
            # Create summary of individual test results for display
            PASSED_TESTS=$(echo "$TEST_RESULTS_JSON" | jq -r '.[] | select(.status == "passed") | .name' | head -3 | tr '\n' ', ' | sed 's/, $//')
            FAILED_TESTS=$(echo "$TEST_RESULTS_JSON" | jq -r '.[] | select(.status == "failed") | .name' | head -3 | tr '\n' ', ' | sed 's/, $//')
            
            if [ -n "$PASSED_TESTS" ]; then
              TEST_SUMMARY="$TEST_SUMMARY. Passed: $PASSED_TESTS"
            fi
            if [ -n "$FAILED_TESTS" ]; then
              TEST_SUMMARY="$TEST_SUMMARY. Failed: $FAILED_TESTS"
            fi
          else
            echo "Warning: report.json not found in extracted ZIP"
            TEST_SUMMARY="Test data extraction failed - report.json not found"
            PASSED_COUNT=0
            FAILED_COUNT=0
            TOTAL_COUNT=0
          fi
          
          # Clean up temporary directory
          cd - > /dev/null
          rm -rf "$TEMP_DIR"
        fi
        
        REPORT_SIZE=$(wc -c < playwright-report/index.html)
        
        # Create comprehensive report data with extracted test results
        REPORT_DATA=$(jq -n \
          --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          --arg commit "${{ github.sha }}" \
          --arg run_id "${{ github.run_id }}" \
          --arg run_number "${{ github.run_number }}" \
          --arg pages_url "https://patilpriyadarshini.github.io/migration-repo/reports/${{ github.run_number }}/index.html" \
          --arg repository "${{ github.repository }}" \
          --arg test_summary "$TEST_SUMMARY" \
          --arg passed_count "$PASSED_COUNT" \
          --arg failed_count "$FAILED_COUNT" \
          --arg total_count "$TOTAL_COUNT" \
          --arg report_size "$REPORT_SIZE" \
          --arg workflow_status "completed" \
          --argjson test_results_json "${TEST_RESULTS_JSON:-[]}" \
          '{
            timestamp: $timestamp,
            commit_sha: $commit,
            run_id: $run_id,
            run_number: $run_number,
            pages_url: $pages_url,
            repository: $repository,
            event_type: "playwright_report_published",
            test_summary: $test_summary,
            test_results: {
              passed: ($passed_count | tonumber),
              failed: ($failed_count | tonumber),
              total: ($total_count | tonumber)
            },
            individual_test_results: $test_results_json,
            report_size_bytes: ($report_size | tonumber),
            workflow_status: $workflow_status,
            content_type: "text/html",
            message: "Playwright tests completed. Full HTML report available at GitHub Pages URL."
          }')
        
        # Send to n8n webhook with retry logic
        if [ -n "${{ secrets.N8N_WEBHOOK_URL }}" ]; then
          echo "Sending comprehensive report data to n8n webhook..."
          echo "Report size: $REPORT_SIZE bytes"
          echo "Test summary: $TEST_SUMMARY"
          echo "Pages URL: https://patilpriyadarshini.github.io/migration-repo/reports/${{ github.run_number }}/index.html"
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$REPORT_DATA" \
            "${{ secrets.N8N_WEBHOOK_URL }}" \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5 \
            --fail-with-body || {
              echo "Webhook failed after retries, but continuing workflow..."
              echo "Webhook URL: ${{ secrets.N8N_WEBHOOK_URL }}"
              echo "Payload size: $(echo "$REPORT_DATA" | wc -c) bytes"
            }
        else
          echo "N8N_WEBHOOK_URL not configured, skipping webhook notification"
        fi
